//A scenelist generator by Adriaan de Jongh

using System;
using System.IO;
using System.Linq;
#if UNITY_EDITOR
using UnityEditor;
#endif
using UnityEngine;

public static class SceneListCheck {
    public static string GetSafeSceneName(string sceneName) {
        return GetValidVariableName(sceneName);
    }

    public static string GetSafeSceneNameFromPath(string path) {
        return GetValidVariableName(Path.GetFileNameWithoutExtension(path));
    }

    private static string GetValidVariableName(string variableName) {
        var variable = variableName;

        string[] invalidStarts = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" };
        if (invalidStarts.Any(start => variableName.StartsWith(start)))
            variable = "_" + variableName;

        string[] invalidCharacters =
        {
            " ", ",", ".", "?", "\"", ";", ":", "\'", "[", "]", "{", "}", "!", "@", "#",
            "$", "%", "^", "&", "*", "(", ")", "-", "/", "\\"
        };
        variable = invalidCharacters.Aggregate(variable, (in_current, in_x) => in_current.Replace(in_x, "_"));

        variable.Replace(" ", "_");

        return variable;
    }

    private static string AppendNewLine(string line) {
        return line + Environment.NewLine;
    }

#if UNITY_EDITOR
    public static void Generate() {
        //get the path of the generator
        string[] guids = AssetDatabase.FindAssets("SceneListCheck");
        string directoryPath = Path.GetDirectoryName(AssetDatabase.GUIDToAssetPath(guids[0]));

        using (var fs = File.Open(Path.Combine(directoryPath, "SceneList.cs"),
            File.Exists(Path.Combine(directoryPath, "SceneList.cs")) ? FileMode.Truncate : FileMode.OpenOrCreate,
            FileAccess.Write)) {
            using (var sw = new StreamWriter(fs)) {
                ////////////////////////////////////////
                // writing out the class
                var fileString = string.Empty;

                fileString += AppendNewLine("// This file was auto-generated by SceneListCheck!");
                fileString += AppendNewLine(string.Empty);
                fileString += AppendNewLine("public enum Scenes ");
                fileString += AppendNewLine("{");

                var scenes = EditorBuildSettings.scenes;

                for (int i = 0; i < scenes.Length; i++) {
                    string sceneName = GetSafeSceneNameFromPath(scenes[i].path);
                    string comma = i == scenes.Length - 1 ? "" : ",";

                    fileString += AppendNewLine("	" + sceneName + " = " + i.ToString() + comma);
                }

                fileString += AppendNewLine("}");

                fileString += AppendNewLine(string.Empty);

                sw.Write(fileString);

                sw.Flush();
            }
        }

        AssetDatabase.Refresh();

        Debug.Log("Generated new SceneList.cs!");
    }
#endif

    public static bool Has(string sceneName) {
#if UNITY_EDITOR
        var scenes = EditorBuildSettings.scenes;

        if (Type.GetType("Scenes") == null || Enum.GetNames(Type.GetType("Scenes")).Length != scenes.Length)
            Generate();

        foreach (EditorBuildSettingsScene s in scenes) {
            if (Path.GetFileNameWithoutExtension(s.path) == sceneName)
                return true;
        }

        return false;
#else
		string safeSceneName = GetSafeSceneName(sceneName);
		return Enum.IsDefined(typeof(Scenes), safeSceneName);
#endif
    }

}